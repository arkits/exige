{"version":3,"sources":["components/AppBar.js","components/Map/DrawStyles.js","components/Map/MapPanel.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["AppBar","className","style","padding","node","getEditHandleStyle","feature","state","RenderStates","SELECTED","HOVERED","UNCOMMITTED","fill","fillOpacity","stroke","strokeWidth","r","getFeatureStyle","index","CLOSING","strokeDasharray","MapPanel","mouseLocation","features","header","JSON","stringify","Map","props","_updateViewport","viewport","setState","_onSelect","options","selectedFeatureIndex","_onDelete","selectedIndex","_editorRef","deleteFeatures","_onUpdate","editType","mode","EditorModes","EDITING","_renderDrawTools","title","onClick","DRAW_POLYGON","_renderControlPanel","getFeatures","containerComponent","_updateMouseLocation","e","latitude","longitude","_handleGridSelectChange","event","zoomLevel","target","value","gridAdaptationZoomLevel","gridAdaptationUrl","console","log","axios","get","then","response","gridAdaptation","data","zoom","READ_ONLY","this","s","m","width","height","mapStyle","mapboxApiAccessToken","onViewportChange","onMouseMove","ref","_","clickRadius","onSelect","onUpdate","editHandleShape","featureStyle","editHandleStyle","type","id","paint","onChange","Component","App","theme","createTheme","animate","show","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98f62188.chunk.js","sourcesContent":["import React from 'react'\nimport { Header, Heading } from 'arwes'\n\nfunction AppBar() {\n    return (\n        <div className=\"AppBar\" style={{ padding: 20 }}>\n            <Header>\n                <Heading node=\"h1\">-/Exige</Heading>\n            </Header>\n        </div>\n    )\n}\n\nexport default AppBar\n","import {RenderStates} from 'react-map-gl-draw';\n\nexport function getEditHandleStyle({feature, state}) {\n  switch (state) {\n    case RenderStates.SELECTED:\n    case RenderStates.HOVERED:\n    case RenderStates.UNCOMMITTED:\n      return {\n        fill: 'rgb(251, 176, 59)',\n        fillOpacity: 1,\n        stroke: 'rgb(255, 255, 255)',\n        strokeWidth: 2,\n        r: 7\n      };\n\n    default:\n      return {\n        fill: 'rgb(251, 176, 59)',\n        fillOpacity: 1,\n        stroke: 'rgb(255, 255, 255)',\n        strokeWidth: 2,\n        r: 5\n      };\n  }\n}\n\nexport function getFeatureStyle({feature, index, state}) {\n  switch (state) {\n    case RenderStates.SELECTED:\n    case RenderStates.HOVERED:\n    case RenderStates.UNCOMMITTED:\n    case RenderStates.CLOSING:\n      return {\n        stroke: 'rgb(251, 176, 59)',\n        strokeWidth: 2,\n        fill: 'rgb(251, 176, 59)',\n        fillOpacity: 0.3,\n        strokeDasharray: '4,2'\n      };\n\n    default:\n      return {\n        stroke: 'rgb(60, 178, 208)',\n        strokeWidth: 2,\n        fill: 'rgb(60, 178, 208)',\n        fillOpacity: 0.1\n      };\n  }\n}","import React from \"react\";\nimport { Project, Code } from \"arwes\";\n\nfunction MapPanel({ mouseLocation, features }) {\n  return (\n    <div className=\"MapPanel\">\n      <Project header=\"Output\">\n        <Code>{JSON.stringify(features, null, 2)}</Code>\n      </Project>\n      <Project header=\"Mouse Location\">\n        <Code>{JSON.stringify(mouseLocation, null, 2)}</Code>\n      </Project>\n    </div>\n  );\n}\n\nexport default MapPanel;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Col, Row } from 'arwes/lib/Grid';\nimport MapGL, { Source, Layer } from 'react-map-gl';\nimport { Editor, EditorModes } from 'react-map-gl-draw';\nimport { getFeatureStyle, getEditHandleStyle } from './DrawStyles';\nimport MapPanel from './MapPanel';\n\nconst TOKEN =\n    'pk.eyJ1IjoiYXJraXRzIiwiYSI6ImNqc3Bud29jMjAzcWc0OXJ6Y3YzOHltaTcifQ.EMMG5GSbT0T-lD8RGJgnAA';\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this._editorRef = null;\n        this.state = {\n            viewport: {\n                latitude: 37.72293542866175,\n                longitude: -122.42614746093749,\n                zoom: 10\n            },\n            mode: EditorModes.READ_ONLY,\n            selectedFeatureIndex: null,\n            mouseLocation: {},\n            gridAdaptation: null,\n            gridAdaptationZoomLevel: '10'\n        };\n    }\n\n    _updateViewport = viewport => {\n        this.setState({ viewport });\n    };\n\n    _onSelect = options => {\n        this.setState({\n            selectedFeatureIndex: options && options.selectedFeatureIndex\n        });\n    };\n\n    _onDelete = () => {\n        const selectedIndex = this.state.selectedFeatureIndex;\n        if (selectedIndex !== null && selectedIndex >= 0) {\n            this._editorRef.deleteFeatures(selectedIndex);\n        }\n    };\n\n    _onUpdate = ({ editType }) => {\n        if (editType === 'addFeature') {\n            this.setState({\n                mode: EditorModes.EDITING\n            });\n        }\n    };\n\n    _renderDrawTools = () => {\n        return (\n            <div className=\"mapboxgl-ctrl-top-left\">\n                <div className=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n                    <button\n                        className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_polygon\"\n                        title=\"Polygon tool (p)\"\n                        onClick={() => this.setState({ mode: EditorModes.DRAW_POLYGON })}\n                    />\n                    <button\n                        className=\"mapbox-gl-draw_ctrl-draw-btn mapbox-gl-draw_trash\"\n                        title=\"Delete\"\n                        onClick={this._onDelete}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    _renderControlPanel = () => {\n        const features = this._editorRef && this._editorRef.getFeatures();\n        return (\n            <MapPanel\n                containerComponent={this.props.containerComponent}\n                mouseLocation={this.state.mouseLocation}\n                features={features}\n            />\n        );\n    };\n\n    _updateMouseLocation = e => {\n        this.setState({\n            mouseLocation: {\n                latitude: e['lngLat'][1],\n                longitude: e['lngLat'][0]\n            }\n        });\n    };\n\n    _handleGridSelectChange = event => {\n\n        let zoomLevel = event.target.value;\n\n        if (zoomLevel !== 0) {\n            this.setState({ gridAdaptationZoomLevel: zoomLevel });\n\n            let gridAdaptationUrl =\n                'https://raw.githubusercontent.com/arkits/exige-react/master/grid/' +\n                zoomLevel +\n                '.json';\n\n            console.log(gridAdaptationUrl);\n\n            axios.get(gridAdaptationUrl).then(response => {\n                console.log('Got Grid Adaptation!');\n                this.setState({ gridAdaptation: null });\n                this.setState({ gridAdaptation: response.data });\n            });\n        }\n    };\n\n    render() {\n        const { viewport, mode } = this.state;\n        return (\n            <div className=\"Map\">\n                <Row>\n                    <Col s={12} m={9}>\n                        <MapGL\n                            {...viewport}\n                            width=\"100%\"\n                            height=\"100vh\"\n                            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n                            mapboxApiAccessToken={TOKEN}\n                            onViewportChange={this._updateViewport}\n                            onMouseMove={this._updateMouseLocation}\n                        >\n                            <Editor\n                                ref={_ => (this._editorRef = _)}\n                                style={{ width: '100%', height: '100%' }}\n                                clickRadius={12}\n                                mode={mode}\n                                onSelect={this._onSelect}\n                                onUpdate={this._onUpdate}\n                                editHandleShape={'circle'}\n                                featureStyle={getFeatureStyle}\n                                editHandleStyle={getEditHandleStyle}\n                            />\n\n                            <Source type=\"geojson\" data={this.state.gridAdaptation}>\n                                <Layer\n                                    id=\"1\"\n                                    type=\"fill\"\n                                    paint={{\n                                        'fill-color': 'rgba(255,255,255,0.0)',\n                                        'fill-outline-color': 'rgba(51, 181, 229,1.0)',\n                                        'fill-opacity': 1\n                                    }}\n                                />\n                            </Source>\n\n                            {this._renderDrawTools()}\n                        </MapGL>\n                    </Col>\n\n                    <Col s={12} m={3}>\n                        <h3>\n                            <select\n                                id=\"gridZoomSelect\"\n                                value={this.state.value}\n                                onChange={this._handleGridSelectChange}\n                            >\n                                <option value=\"0\">Zoom Level</option>\n                                <option value=\"12\">12</option>\n                                <option value=\"11\">11</option>\n                                <option value=\"10\">10</option>\n                                <option value=\"9\">9</option>\n                            </select>\n                        </h3>\n\n                        {this._renderControlPanel()}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Map;\n","import React from 'react'\nimport { ThemeProvider, createTheme, Arwes, Row } from 'arwes'\nimport AppBar from './components/AppBar'\nimport Map from './components/Map/Map'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ThemeProvider theme={createTheme()}>\n                <Arwes animate={false} show={false}>\n                    <AppBar />\n                    <Row>\n                        <div style={{ padding: 20 }}>\n                            <Map />\n                        </div>\n                    </Row>\n                </Arwes>\n            </ThemeProvider>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/base.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}