{"version":3,"sources":["styles/useStyles.js","components/NavBar.js","store/AskariStore.js","components/About.js","components/SocketIO/SioEvents.js","components/SocketIO/SioClient.js","components/Dashboard/MouseLocationPanel.js","components/Dashboard/OptionsBar/OptionsButton.js","components/Dashboard/OptionsBar/ElementToggle.js","components/Dashboard/OptionsBar/OptionsBar.js","components/Dashboard/Map.js","components/Dashboard/PositionsTable.js","components/Dashboard/Dashboard.js","components/AskariSnackbar.js","App.js","styles/theme.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","minHeight","main","marginTop","spacing","footer","padding","backgroundColor","palette","type","grey","flexGrow","menuButton","marginRight","title","textDecoration","color","fontFamily","fontWeight","fontStyle","NavBar","classes","AppBar","style","background","position","Toolbar","Typography","component","Link","to","variant","className","Button","AskariStore","sioStatus","positions","mouseLocation","gridZoomLevel","snackbar","message","isOpen","elementsToggle","positionsTable","decorate","observable","AskariStoreContext","createContext","StoreDump","observer","askariStore","useContext","JSON","stringify","About","Grid","container","item","xs","sm","Card","CardContent","maxHeight","SioEvents","event","handler","console","log","data","SioClient","uri","options","transports","MouseLocationPanel","zoomLevel","latitudeRad","Math","PI","n","xtile","trunc","ytile","tan","cos","parseInt","calcMouseLocationDetail","Transition","React","forwardRef","props","ref","Slide","direction","OptionsButton","useState","open","setOpen","handleClose","onClick","endIcon","Icon","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","ElementToggle","toggleElement","elementName","marginLeft","ButtonGroup","aria-label","OptionsBar","textTransform","MapGl","ReactMapboxGl","accessToken","Map","zoom","center","containerStyle","height","width","onMouseMove","_","e","coordinates","lat","lng","strCoordinates","navigator","clipboard","writeText","columns","label","align","format","value","toLocaleString","PositionsTable","rows","Object","values","Paper","TableContainer","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","key","minWidth","TableBody","row","hover","role","tabIndex","code","RenderMouseLocationPanel","RenderPositionsTable","Dashboard","AskariSnackbar","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","action","Fragment","IconButton","size","fontSize","App","CssBaseline","basename","process","path","Container","createMuiTheme","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.391c080e.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"100vh\"\n  },\n  main: {\n    marginTop: theme.spacing(8)\n  },\n  footer: {\n    padding: theme.spacing(2, 2),\n    marginTop: \"auto\",\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.grey[800]\n        : theme.palette.grey[200]\n  }\n}));\n\nexport default useStyles","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1,\n    textDecoration: \"none\",\n    color: \"white\",\n    fontFamily: \"IBM Plex Mono\",\n    fontWeight: \"bold\",\n    fontStyle: \"italic\"\n  }\n}));\n\nfunction NavBar() {\n  const classes = useStyles();\n  return (\n    <AppBar style={{ background: '#212121' }} position=\"static\">\n      <Toolbar>\n        <Typography\n          component={Link}\n          to=\"/\"\n          variant=\"h6\"\n          className={classes.title}\n        >\n          ~/Exige Reborn\n        </Typography>\n        <Button component={Link} to=\"/about\" color=\"inherit\">\n          Debug\n        </Button>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default NavBar;\n","import { observable, decorate } from \"mobx\";\nimport { createContext } from \"react\";\n\nclass AskariStore {\n  sioStatus = \"DISCONNECTED\";\n  positions = {};\n  mouseLocation = {};\n  gridZoomLevel = 10;\n  snackbar = {\n    message: null,\n    isOpen: false,\n    type: null\n  };\n  elementsToggle = {\n    mouseLocation: true,\n    positionsTable: false\n  };\n}\n\ndecorate(AskariStore, {\n  sioStatus: observable,\n  positions: observable,\n  mouseLocation: observable,\n  gridZoomLevel: observable,\n  snackbar: observable,\n  elementsToggle: observable\n});\n\nexport const AskariStoreContext = createContext(new AskariStore());\n","import React, { useContext } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { observer } from 'mobx-react';\nimport { AskariStoreContext } from '../store/AskariStore';\n\nconst StoreDump = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n    return <pre>{JSON.stringify(askariStore, null, 2)}</pre>;\n});\n\nfunction About() {\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n                <Card>\n                    <CardContent>\n                        <Typography variant=\"h5\">About</Typography>\n                        <br />\n                        <Typography variant=\"body1\">\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n                            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n                            veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n                            commodo consequat.\n                            <br />\n                            <br />\n                            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\n                            dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n                            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n                <Card style={{ maxHeight: '90vh' }}>\n                    <CardContent>\n                        <Typography variant=\"h5\">Store Dump</Typography>\n                        <br />\n                        <StoreDump />\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default About;\n","import React, { useContext } from \"react\";\nimport { Event } from \"react-socket-io\";\nimport { observer } from \"mobx-react\";\nimport { AskariStoreContext } from \"../../store/AskariStore\";\n\nconst SioEvents = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n  \n    const onConnect = () => {\n      console.log(\"Connected!\");\n      askariStore.sioStatus = \"CONNECTED\";\n    };\n  \n    const onData = (data) => {\n      console.log(\"Data! - \", data);\n      askariStore.positions[data[\"vehicleId\"]] = data;\n    };\n  \n    return (\n      <>\n        <Event event=\"connect\" handler={onConnect} />\n        <Event event=\"outgoing data\" handler={onData} />\n      </>\n    );\n  });\n\nexport default SioEvents;\n","import React from \"react\";\nimport { Socket } from \"react-socket-io\";\nimport SioEvents from \"./SioEvents\";\n\nconst SioClient = () => {\n\n  const uri = \"http://localhost:4001\";\n  const options = { transports: [\"websocket\"] };\n\n  return (\n    <>\n      <Socket uri={uri} options={options}>\n        <SioEvents />\n      </Socket>\n    </>\n  );\n};\n\nexport default SioClient;\n","import React, { useContext } from 'react';\nimport { observer } from 'mobx-react';\nimport { AskariStoreContext } from '../../store/AskariStore';\n\nconst MouseLocationPanel = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n\n    const calcMouseLocationDetail = () => {\n        let mouseLocation = askariStore.mouseLocation;\n        let zoomLevel = askariStore.gridZoomLevel;\n\n        // Conversion from co-ordinate to Slippy X/Y adapted from\n        // https://github.com/interuss/dss/blob/legacy/tcl4/datanode/src/slippy_util.py\n\n        let latitudeRad = Math.PI * (mouseLocation['lat'] / 180);\n        let n = 2.0 ** zoomLevel;\n        let xtile = Math.trunc(((mouseLocation['lng'] + 180.0) / 360.0) * n);\n        let ytile = Math.trunc(\n            ((1.0 - Math.log(Math.tan(latitudeRad) + 1 / Math.cos(latitudeRad)) / Math.PI) / 2.0) *\n                n\n        );\n\n        mouseLocation['x'] = xtile;\n        mouseLocation['y'] = ytile;\n        mouseLocation['zoomLevel'] = parseInt(zoomLevel);\n\n        return mouseLocation;\n    };\n\n    return (\n        <div className=\"MouseLocationPanel\">\n            <div style={{ fontFamily: 'IBM Plex Mono', fontWeight: 'bold', fontStyle: 'italic' }}>\n                Mouse Location\n            </div>\n            <pre style={{ fontFamily: 'IBM Plex Mono' }}>\n                {JSON.stringify(calcMouseLocationDetail(), null, 2)}\n            </pre>\n        </div>\n    );\n});\n\nexport default MouseLocationPanel;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction OptionsButton() {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                style={{ backgroundColor: '#33b5e5' }}\n                onClick={handleClickOpen}\n                endIcon={<Icon>settings</Icon>}\n            >\n                Options\n            </Button>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">\n                    <div\n                        style={{\n                            fontFamily: 'IBM Plex Mono',\n                            fontWeight: 'bold',\n                            fontStyle: 'italic'\n                        }}\n                    >\n                        {'~/Exige Options'}\n                    </div>\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n      \n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n                            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n                            veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n                            commodo consequat.\n                            <br />\n                            <br />\n                            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum\n                            dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n                            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n              \n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} style={{ color: '#33b5e5' }}>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default OptionsButton;\n","import React, { useContext } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { observer } from 'mobx-react';\nimport { AskariStoreContext } from '../../../store/AskariStore';\n\nconst ElementToggle = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n\n    const toggleElement = elementName => {\n        askariStore.elementsToggle[elementName] = !askariStore.elementsToggle[elementName];\n    };\n\n    return (\n        <div\n            style={{\n                marginLeft: 'auto'\n            }}\n        >\n            <ButtonGroup color=\"secondary\" aria-label=\"outlined primary button group\">\n                <Button\n                    variant={askariStore.elementsToggle.mouseLocation ? 'contained' : 'outlined'}\n                    onClick={() => toggleElement('mouseLocation')}\n                >\n                    Mouse Location\n                </Button>\n                <Button\n                    variant={askariStore.elementsToggle.positionsTable ? 'contained' : 'outlined'}\n                    onClick={() => toggleElement('positionsTable')}\n                >\n                    Positions Table\n                </Button>\n            </ButtonGroup>\n        </div>\n    );\n});\n\nexport default ElementToggle;\n","import React, { useContext } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { observer } from 'mobx-react';\nimport { AskariStoreContext } from '../../../store/AskariStore';\nimport OptionsButton from './OptionsButton';\nimport ElementToggle from './ElementToggle';\n\nconst OptionsBar = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n\n    return (\n        <div className=\"OptionsBar\">\n            <OptionsButton />\n\n            <ElementToggle />\n\n            <div\n                className=\"leftStatus\"\n                style={{\n                    marginLeft: 'auto',\n                    textTransform: 'none'\n                }}\n            >\n                <Button\n                    variant=\"contained\"\n                    style={{\n                        textTransform: 'none',\n                        fontFamily: 'IBM Plex Mono',\n                        backgroundColor: askariStore.sioStatus === 'CONNECTED' ? 'green' : 'red',\n                        fontWeight: 'bold'\n                    }}\n                >\n                    S.IO: {askariStore.sioStatus}\n                </Button>\n            </div>\n        </div>\n    );\n});\n\nexport default OptionsBar;\n","import React, { useContext } from \"react\";\nimport ReactMapboxGl from \"react-mapbox-gl\";\nimport { observer } from \"mobx-react\";\nimport { AskariStoreContext } from \"../../store/AskariStore\";\n\nconst MapGl = ReactMapboxGl({\n  accessToken:\n    \"pk.eyJ1IjoiYXJraXRzIiwiYSI6ImNqc3Bud29jMjAzcWc0OXJ6Y3YzOHltaTcifQ.EMMG5GSbT0T-lD8RGJgnAA\"\n});\n\nconst Map = observer(() => {\n  const askariStore = useContext(AskariStoreContext);\n\n  const updateMouseLocation = (_, e) => {\n    askariStore.mouseLocation[\"lat\"] = e[\"lngLat\"][\"lat\"];\n    askariStore.mouseLocation[\"lng\"] = e[\"lngLat\"][\"lng\"];\n  };\n\n  const copyLatLng = (_, e) => {\n    \n    let coordinates = {\n      lat: e[\"lngLat\"][\"lat\"],\n      lng: e[\"lngLat\"][\"lng\"]\n    }\n\n    let strCoordinates = JSON.stringify(coordinates);\n\n    console.log(\"Copied to clipboard - \", strCoordinates);\n\n    navigator.clipboard.writeText(strCoordinates);\n\n    askariStore.snackbar.message = \"Copied to co-ordinates to clipboard.\";\n    askariStore.snackbar.isOpen = true;\n    \n  };\n\n  return (\n    <div className=\"Map\">\n      <MapGl\n        style=\"mapbox://styles/mapbox/dark-v9\"\n        zoom={[9]}\n        center={[-122.43438720703125, 37.77722770873696]}\n        containerStyle={{\n          height: \"calc(100vh - 70px)\",\n          width: \"100vw\"\n        }}\n        onMouseMove={updateMouseLocation}\n        onClick={copyLatLng}\n      ></MapGl>\n    </div>\n  );\n});\n\nexport default Map;\n","import React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { observer } from \"mobx-react\";\nimport { AskariStoreContext } from \"../../store/AskariStore\";\n\nconst columns = [\n  {\n    id: \"vehicleId\",\n    label: \"vehicleId\",\n    align: \"left\",\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"latitude\",\n    label: \"latitude\",\n    align: \"right\",\n    format: value => value.toLocaleString()\n  },\n  {\n    id: \"longitude\",\n    label: \"longitude\",\n    align: \"right\",\n    format: value => value.toLocaleString()\n  }\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  },\n  container: {\n    maxHeight: \"80vh\"\n  }\n});\n\nconst PositionsTable = observer(() => {\n  const askariStore = useContext(AskariStoreContext);\n\n  const rows = Object.values(askariStore.positions);\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"PositionsTable\">\n      <Paper className={classes.root}>\n        <TableContainer className={classes.container}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map(column => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map(row => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map(column => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === \"number\"\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </div>\n  );\n});\n\nexport default PositionsTable;\n","import React, { useContext } from 'react';\nimport { observer } from 'mobx-react';\nimport { AskariStoreContext } from '../../store/AskariStore';\nimport MouseLocationPanel from './MouseLocationPanel';\nimport OptionsBar from './OptionsBar/OptionsBar';\nimport Map from './Map';\nimport PositionsTable from './PositionsTable';\n\nimport './Dashboard.css';\n\nconst RenderMouseLocationPanel = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n\n    if (askariStore.elementsToggle.mouseLocation) {\n        return <MouseLocationPanel />;\n    } else {\n        return null;\n    }\n});\n\nconst RenderPositionsTable = observer(() => {\n    const askariStore = useContext(AskariStoreContext);\n\n    if (askariStore.elementsToggle.positionsTable) {\n        return <PositionsTable />;\n    } else {\n        return null;\n    }\n});\n\nconst Dashboard = () => {\n    return (\n        <div className=\"Dashboard\">\n            <Map />\n            <RenderMouseLocationPanel />\n            <RenderPositionsTable />\n            <OptionsBar />\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React, { useContext } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { observer } from \"mobx-react\";\nimport { AskariStoreContext } from \"../store/AskariStore\";\n\nconst AskariSnackbar = observer(() => {\n  const askariStore = useContext(AskariStoreContext);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    askariStore.snackbar.isOpen = false;\n  };\n\n  return (\n    <>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\"\n        }}\n        open={askariStore.snackbar.isOpen}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        message={askariStore.snackbar.message}\n        action={\n          <React.Fragment>\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      ></Snackbar>\n    </>\n  );\n});\n\nexport default AskariSnackbar;\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useStyles from \"./styles/useStyles\";\nimport Container from \"@material-ui/core/Container\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport About from \"./components/About\";\nimport SioClient from \"./components/SocketIO/SioClient\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport AskariSnackbar from \"./components/AskariSnackbar\";\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <SioClient />\n      <CssBaseline />\n      <Router basename={process.env.PUBLIC_URL}>\n        <NavBar />\n        <Switch>\n          <Route path=\"/about\">\n            <Container component=\"main\" className={classes.main}>\n              <About />\n            </Container>\n          </Route>\n          <Route path=\"/\">\n          <Dashboard />\n          </Route>\n        </Switch>\n      </Router>\n      <AskariSnackbar />\n    </div>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport \"./styles/style.css\";\nimport App from \"./App\";\nimport theme from \"./styles/theme\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}